const { ezra } = require("../fredi/ezra");

// Continue request with fun emojis 
ezra({
  nomCom: "happies",
  categorie: "sir bravin-Fun",
  reaction: "üòÇ"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπTOXIC LOVER V2-XMDüåπ HAPPY WE GO... ü§¶" });
    const animations =  ['üòÉ', 'üòÑ', 'üòÅ', 'üòä', 'üòé', 'ü•≥', 'üò∏', 'üòπ', 'üåû', 'üåà', 'üòÉ', 'üòÑ', 'üòÅ', 'üòä', 'üòé', 'ü•≥', 'üò∏', 'üòπ', 'üåû', 'üåà', 'üòÉ', 'üòÑ', 'üòÅ', 'üòä'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
ezra({
  nomCom: "heart",
  aliases: ["moyo", "hrt"],
  categorie: "sir bravin-Fun",
  reaction: "ü´Ä"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπTOXIC LOVER-V2 XMD HEART WE GO... ü§¶" });
    const animations =  ['üíñ', 'üíó', 'üíï', '‚ù§Ô∏è', 'üíõ', 'üíö', 'ü´Ä', 'üíô', 'üíú', 'üñ§', '‚ô•Ô∏è', 'ü§ç', 'ü§é', 'üíó', 'üíû', 'üíì', 'üíò', 'üíù', '‚ô•Ô∏è', 'üíü', 'ü´Ä', '‚ù§Ô∏è'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
ezra({
  nomCom: "angry",
  categorie: "sir bravin-Fun",
  reaction: "ü•∫"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπTOXIC LOVER-V2 XMD ANGRY HERE WE GO... ü§¶" });
    const animations =   ['üò°', 'üò†', 'ü§¨', 'üò§', 'üòæ', 'üò°', 'üò†', 'ü§¨', 'üò§', 'üòæ'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
ezra({
  nomCom: "sad",
  aliases: ["heartbroken", "hrtbroken"],
  categorie: "sir bravin-Fun",
  reaction: "üòí"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "*üåπTOXOC LOVER-V2 XMDüåπ SAD WE GO...* ü§¶" });
    const animations =  ['ü•∫', 'üòü', 'üòï', 'üòñ', 'üò´', 'üôÅ', 'üò©', 'üò•', 'üòì', 'üò™', 'üò¢', 'üòî', 'üòû', 'üò≠', 'üôÇ‚Äç‚ÜïÔ∏è', 'üò≠', 'üòø'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
ezra({
  nomCom: "shy",
  aliases: ["shyoff", "shyy"],
  categorie: "sir bravin-Fun",
  reaction: "ü•Ç"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "TOXIC LOVER-V2 XMDüåπ SHY WE GO... ü§¶" });
    const animations =  ['üò≥', 'üòä', 'üò∂', 'üôà', 'üôä', 'üò≥', 'üòä', 'üò∂', 'üôà', 'üôä'];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
ezra({
  nomCom: "moon",
  aliases: ["mon", "mwezi"],
  categorie: "sir bravin-Fun",
  reaction: "üåö"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπTOXIC LOVER-V2 XMDüåπ MOON WE GO... ü§¶" });
    const animations =   ['üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', "üåöüåù"];
    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});

ezra({
  nomCom: "nikal",
  categorie: "sir bravin-Fun",
  reaction: "‚ÅâÔ∏è"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπtoxic lover-v2 xmdüåπ NIKAL WE GO... ü§¶" });
    const animations = ["   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è          ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏          ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   Nikal   ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±        ‚£ø  ‚¢π           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ   __        ‚°ø  ‚°á        ‚°º\n   ‚†π‚£∂‚†Ü     ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏      `", "   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è          ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏          ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   Fredie   ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±        ‚£ø  ‚¢π           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ  |__|     ‚°ø  ‚°á        ‚°º\n   ‚†π‚£∂‚†Ü     ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏      `", "   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è           ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏          ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏   Pehli   ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±       ‚£ø  ‚¢π            ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ  (P)       ‚°ø  ‚°á        ‚°º\n   ‚†π‚£∂‚†Ü     ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏      `", "   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è           ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏          ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏  Fursat  ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±         ‚£ø  ‚¢π           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ   __        ‚°ø  ‚°á        ‚°º\n   ‚†π‚£∂‚†Ü     ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏      `", "   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è           ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏          ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏  Meeee   ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±         ‚£ø  ‚¢π           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ  |__|      ‚°ø  ‚°á        ‚°º\n   ‚†π‚£∂‚†Ü     ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏      `", "   ‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä   ‚¢†‚†û‚†â‚†ô‚†≤‚°Ä \n  ‚£¥‚†ø‚†è           ‚¢≥‚°Ä ‚°è         ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä ‚£Ä‚°Ä   ‚£ß ‚¢∏           ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤   ‚£ø  ‚£∏   Nikal   ‚°á\n ‚£ü‚£ø‚°≠     ‚¢±        ‚£ø  ‚¢π            ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ  lodu     ‚°ø  ‚°á       ‚°º\n   ‚†π‚£∂‚†Ü       ‚°¥‚†É    ‚†ò‚†§‚£Ñ‚£†‚†û \n    ‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å          \n ‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å  ‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä      \n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø      \n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è    ‚£Ñ‚¢∏ "];

    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});

ezra({
  nomCom: "hand",
  categorie: "sir bravin-Fun",
  reaction: "üëä"
}, async (dest, zk, commandeOptions) => {
  const { repondre, ms } = commandeOptions;
  
  try {
    const sentMessage = await zk.sendMessage(dest, { text: "üåπTOXIC LOVER-V2 XMDüåπHAND WE GO...ü§¶" });
    const animations = [
      '8‚úäÔ∏è===D', '8=‚úäÔ∏è==D', '8==‚úäÔ∏è=D', '8===‚úäÔ∏èD', '8==‚úäÔ∏è=D', '8=‚úäÔ∏è==D', 
      '8‚úäÔ∏è===D', '8=‚úäÔ∏è==D', '8==‚úäÔ∏è=D', '8===‚úäÔ∏èD', '8==‚úäÔ∏è=D', '8=‚úäÔ∏è==D', 
      '8‚úäÔ∏è===D', '8=‚úäÔ∏è==D', '8==‚úäÔ∏è=D', '8===‚úäÔ∏èD', '8==‚úäÔ∏è=D', '8=‚úäÔ∏è==D', 
      '8‚úäÔ∏è===D', '8=‚úäÔ∏è==D', '8==‚úäÔ∏è=D', '8===‚úäÔ∏èD üí¶', '8==‚úäÔ∏è=Düí¶ üí¶', '8=‚úäÔ∏è==D üí¶üí¶ üí¶'
    ];

    for (const animation of animations) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await zk.relayMessage(dest, {
        protocolMessage: {
          key: sentMessage.key,
          type: 14, // Protocol message type for edited message
          editedMessage: {
            conversation: animation
          }
        }
      }, {});
    }
  } catch (error) {
    console.log(error);
    repondre("‚ùå *Error!* " + error.message);
  }
});
